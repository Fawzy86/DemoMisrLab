<div id="QC_Revision_Analyzes_Loading" style="display:none;"><i class="fa fa-spinner"></i></div>
@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "QC_Revision_Analyzes_Form" }))
{
    @Html.AntiForgeryToken()
    <div class="captureresult-listb">

        <div class="col-md-7 mar-botmob">
            <div class="input-group" style="margin-top:0;">
                <div class="input-group-btn search-panel">
                    <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" style="width:100%;">
                        <span id="QC_Revision_Search_concept">Filter by</span> <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu" role="menu">
                        <li><a href="#RefId">Reference ID</a></li>
                        <li><a href="#Unit">Unit</a></li>
                        <li><a href="#Device">Device</a></li>
                        <li><a href="#Doctor">Doctor</a></li>
                        @*<li><a href="#RunNumber">Run#</a></li>*@
                        <li><a href="#AnalysisName">Analysis</a></li>
                    </ul>
                </div>
                <input type="hidden" name="QC_Revision_search_param" value="all" id="QC_Revision_search_param">
                <input type="text" id="QC_Revision_SearchText" class="form-control" name="x" placeholder="Search term..." style="width: 53%; height:34px;">
                <span class="input-group-btn">
                    <button class="btn btn-default" type="button" id="QC_Revision_Search_Link"><span class="glyphicon glyphicon-search"></span></button>
                </span>
            </div>
        </div>

        <div class="col-md-5">

            <div id="QC_Revision_Report_Range" class="pull-right" style="background: #fff; cursor: pointer; padding: 8px 10px; border: 1px solid #ccc; width: 100%">
                <i class="glyphicon glyphicon-calendar fa fa-calendar"></i>&nbsp;
                <span id="QC_Revision_DateRangeText"></span> <b class="caret"></b>
            </div>

        </div>

    </div>


    <div class="input-group table-responsive" id="QC_Revision_Container">
        @{Html.RenderAction("GetAnalyzes");}
    </div>
    <div id="QC_Revision_Popup" class="overlay">
        <div class=" popup">
            <a class="close" href="#">&times;</a>
            <div class="contentt" style="overflow: visible;" id="QC_Revision_Popup_Content"></div>
        </div>
    </div>
}
<script type="text/javascript">
    ////////////////////////////////////////////////////////////
    $(document).ajaxStart(function () {
        try {
            $("#QC_Revision_Analyzes_Form").prop('disabled', true);
            $("#QC_Revision_Analyzes_Loading").show();
        }
        catch (err) {
            alert(err.message);
        }
    });
    /////////////////////////////////////////////////////////
    $(document).ajaxStop(function () {
        try {
            $("#QC_Revision_Analyzes_Form").prop('disabled', true);
            $("#QC_Revision_Analyzes_Loading").hide();
        }
        catch (err) {
            alert(err.message);
        }
    });
    /////////////////////////////////
    $(function () {

        $('.search-panel .dropdown-menu').find('a').click(function (e) {
            e.preventDefault();
            var param = $(this).attr("href").replace("#", "");
            var concept = $(this).text();
            $('.search-panel span#QC_Revision_Search_concept').text(concept);
            $('.input-group #QC_Revision_search_param').val(param);
        });

        function cb(start, end) {
            $('#QC_Revision_Report_Range span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'));
        }
        cb(moment(), moment());

        $('#QC_Revision_Report_Range').daterangepicker({
            ranges: {
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, cb);

    });

    //////////////////////////////////////////////////////////
    $('#QC_Revision_Search_Link').on('click', function (event) {
        event.preventDefault();
        LoadAnalyzesForReviewing();
    });
    //////////////////////////////////////////////////////////////////////
    $('#QC_Revision_Report_Range').on('apply.daterangepicker', function (ev, picker) {
        LoadAnalyzesForReviewing();
    });
    ////////////////////////////////////////////////////////////////////////////////////
    function LoadAnalyzesForReviewing() {
        try {
            var SearchValue = $("#QC_Revision_SearchText").val();
            var search_param = $("#QC_Revision_search_param").val();
            var DateRangeValue = $("#QC_Revision_DateRangeText").html();
            $.ajax({
                cache: false,
                async: true,
                type: "GET",
                url: "/QC/GetAnalyzes?SearchPattern=" + SearchValue + "&SearchType=" + search_param + "&DateRange=" + DateRangeValue,//form.attr('action'),
                success: function (data) {
                    $("#QC_Revision_Container").html(data);
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err + " " + desc + " " + xhr.responseText);
                }
            });
        }
        catch (err) {
            alert(err.message + err.description);
        }
    }
    //////////////////////////////////////////////////////////
    $('#QC_Revision_SearchText').keyup(function () {
        var SearchPattern = $(this).val();
        try {
            if (SearchPattern != null && SearchPattern.length > 0) {
                SearchPattern = SearchPattern.toLocaleLowerCase();
            }
            $.each($('#QC_Analyzes_Result_Table tbody tr'), function (i, val) {
                console.log(($(val).text()));
                if ($(val).text().toLocaleLowerCase().indexOf(SearchPattern) == -1) {
                    $(val).hide();
                } else {
                    $(val).show();
                }
            });
        }
        catch (err) {
            alert(err.message);
        }
    });
    ///////////////////////////////////////////////////////
    function GetAnalysisDetails(RequestedAnalysisId) {
        try {
            $.ajax({
                cache: false,
                async: true,
                type: "GET",
                url: "/Lab/GetAnalysisDetails?RequestedAnalysisId=" + RequestedAnalysisId,//form.attr('action'),
                success: function (data) {
                    console.log(data);
                    $("#QC_Revision_Popup_Content").html(data);
                    window.location.href = "#QC_Revision_Popup";
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err.message + " " + desc.message + " " + xhr.responseText);
                }
            });
        }
        catch (err) {
            alert(err.message + err.description);
        }
    }
    //////////////////////////////////////////////////
    function GoToOpenedAnalysis(ev, RequestId) {
        ev.preventDefault();
        $("#Analyzes_Report_Link").trigger('click');
        LoadRequests(RequestId);
    }
</script>

