@model DemoMisrInternationalLab.Models.PatientRequestViewModel
@using DemoMisrInternationalLab.Resources
@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "MatchingPatientForm" }))
{
    @Html.AntiForgeryToken()
    if (Model != null && Model.MatchingPatients.Any())
    {
        @*<div id="popup1" class="overlay">
            <div class="popup">
                <a class="close" href="#">&times;</a>
                <div class="content">*@
        @Html.HiddenFor(m => Model.PatientInfo.PatientID)
        @Html.HiddenFor(m => Model.Organizations.SelectedOrganizationID)
        for (int i = 0; i < Model.Analyzes.SelectedAnalyzesIDs.Count(); i++)
        {
            @Html.HiddenFor(m => Model.Analyzes.SelectedAnalyzesIDs[i])
        }
        @Html.HiddenFor(m => Model.DoctorsRef.SelectedDoctorRefID)
        @Html.HiddenFor(m => Model.ExtraCost)
        @Html.HiddenFor(m => Model.ExtraDiscount)
        @Html.HiddenFor(m => Model.Paid)
        @Html.HiddenFor(m => Model.Remain)
        @Html.HiddenFor(m => Model.RequestPriority)
        @Html.HiddenFor(m => Model.TotalAfterCharges)
        @Html.HiddenFor(m => Model.PatientInfo.Address)
        @Html.HiddenFor(m => Model.PatientInfo.Age)
        @Html.HiddenFor(m => Model.PatientInfo.BirthDate)
        @Html.HiddenFor(m => Model.PatientInfo.BirthMonth)
        @Html.HiddenFor(m => Model.PatientInfo.BirthYear)
        @Html.HiddenFor(m => Model.PatientInfo.Email)
        @Html.HiddenFor(m => Model.PatientInfo.FirstName)
        @Html.HiddenFor(m => Model.PatientInfo.Gender)
        @Html.HiddenFor(m => Model.PatientInfo.LastName)
        @Html.HiddenFor(m => Model.PatientInfo.MiddleName)
        @Html.HiddenFor(m => Model.PatientInfo.Mobile)
        @Html.HiddenFor(m => Model.PatientInfo.NationalID)
        @Html.HiddenFor(m => Model.PatientInfo.OrganizationID)
        @Html.HiddenFor(m => Model.PatientInfo.Phone)
        @Html.HiddenFor(m => Model.PatientInfo.Provinces.SelectedProvinceID)
        @Html.HiddenFor(m => Model.PatientInfo.ReferenceID)
        @Html.HiddenFor(m => Model.PatientInfo.RegisteredDate)
        @Html.HiddenFor(m => Model.PatientInfo.SelectedCityID)
        <div class="table-scroll">
            <table class="table table-bordered">
                <thead>
                    <tr style="BACKGROUND-COLOR: #1C598F;COLOR: #FFF;">
                        <td>Date</td>
                        <th>PatientName</th>
                        <th>Address</th>
                        <th>BirthDate</th>
                        <th>Mobile</th>
                        <th>Phone</th>
                        <th>Doctor</th>
                        <th>Reference ID</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var request in Model.MatchingPatients)
                    {
                        <tr>
                            <td>@Html.DisplayFor(m => request.Patient.RegisteredDate)  @Html.HiddenFor(m => request.PatientID)</td>
                            <td>
                                @Html.DisplayFor(m => request.Patient.FirstName) @Html.DisplayFor(m => request.Patient.MiddleName) @Html.DisplayFor(m => request.Patient.LastName)
                            </td>
                            <td>@Html.DisplayFor(m => request.Patient.Address)</td>
                            <td>@Html.DisplayFor(m => request.Patient.BirthDate)</td>
                            <td>@Html.DisplayFor(m => request.Patient.Mobile)</td>
                            <td>@Html.DisplayFor(m => request.Patient.Phone)</td>
                            <td>@Html.DisplayFor(m => request.DoctorRef.DoctorName)</td>
                            <td>@Html.DisplayFor(m => request.Patient.ReferenceID)</td>
                            <td>
                                @Html.ActionLink("Continue with this patient", "", new
                               {
                                   PatientRefID = @request.Patient.ReferenceID,
                                   Category = @ViewBag.Container
                               },
                               new {
                                    onclick = "return ContinueWithExitingPatient('" + @request.Patient.ReferenceID + "','" + @ViewBag.Container + "');"
                                })
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-md-12 text-right">
            <button type="button" id="CanccelIndividualPatientRequestForMachingPatients"
                    name="CanccelIndividualPatientRequestForMachingPatients" class="btn btn-danger"
                    style="border-radius:0;" onclick="CloseRequestResultPopup('@ViewBag.Container');">
                Cancel
            </button>
        </div>
        @*</div>
                </div>
            </div>*@
    }
}
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/CustomerCare/CloseResultPopup")
@*<script src="~/Scripts/CustomerCare/ClosePatientRequestResultPopup.js"></script>*@

<script type="text/javascript">
    ////////////////////////////////////////////////////////////
    function ContinueWithExitingPatient(patientRefID, Container) {
        //  var form = $(this).closest("form");
        var form = $("#MatchingPatientForm");
        // var form = document.forms["MatchingPatientForm"];
        try {
            if (form.valid()) {
                $.ajax({
                    cache: false,
                    async: true,
                    type: "POST",
                    url: "/CustomerCare/UpdatePatientRefID",//form.attr('action'),
                    data: form.serialize() + "&PatientRefID=" + patientRefID + "&Category=" + Container,
                    success: function (data) {
                        if (Container.indexOf('@CategoryType.Individual') != -1) {
                            IndividualOpenRequestResultPopup(data);
                        }
                        else if (Container.indexOf('@CategoryType.Contract') != -1) {
                            ContractOpenRequestResultPopup(data);
                        }
                        else if (Container.indexOf('@CategoryType.LabToLab') != -1) {
                            LabToLabOpenRequestResultPopup(data);
                        }
                    },
                    error: function (xhr, desc, err) {
                        alert("Error: " + err + " " + desc + " " + xhr.responseText);
                    }
                });
            }
        }
        catch (err) {
            alert(err.message + err.description);
        }
        return false;
    }
</script>

