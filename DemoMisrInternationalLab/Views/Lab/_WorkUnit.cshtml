@model DemoMisrInternationalLab.Models.UnitsViewModel
@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "Work_Unit_Form"}))
{
    @Html.AntiForgeryToken()
    <div class="input-group">

        <div class="col-md-12">
            @Html.DropDownListFor(p => Model.SelectedUnitId,
                                       Model.UnitsIEnum, "-- Units --",
                                     new { @id = "Work_Unit_SelectedUnitId", @class = "form-control" })

        </div>

    </div>
    <div id="Work_Unit_DevicesWithAnalyzes_Container"></div>
    <div id="Device_Plan_Analyzes_Popup" class="overlay">
        <div class=" popup">
            <a class="close" href="#">&times;</a>
            <div class="contentt" id="Device_Plan_Analyzes_Popup_Content"></div>
        </div>
    </div>
    <div id="Drag_Analysis_ToDevice_Confirmation_Popup" class="overlay">
        <div class=" popup">
            <a class="close" href="#">&times;</a>
            <div class="contentt" style="overflow: visible;" id="Drag_Analysis_ToDevice_Confirmation_Popup_Content"></div>
            <button type="button" class="btn btn-danger" style="border-radius:0;" onclick="Close();">Close</button>
        </div>
    </div>

}

@*@Scripts.Render("~/bundles/jqueryui")*@
<script type="text/javascript">
    /////////////////////////////////////////////////////////////////
    $('#Work_Unit_SelectedUnitId').change(function () {
        var SelectedUnitId = this.value;
        LoadUnitAndDevices(SelectedUnitId);
    });
    //////////////////////////////////////////////////////////////////////
    function LoadUnitAndDevices(UnitId) {
        try {
            $("#Work_Unit_DevicesWithAnalyzes_Container").load('@Url.Action("LoadUnitAndDevices", "Lab")?UnitId=' + UnitId);
        }
        catch (err) {
            alert(err.message);
        }
    }
    ///////////////////////////////////////////////////////////
    $(function () {
        /////////////////////////////////////////////////////////////////////
        document.addEventListener("drag", function (ev) {

        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragstart", function (ev) {
            // store a ref. on the dragged elem
            console.log("dragstart");
            var SelectedItems = [];
            $.each($('#' + ev.target.parentNode.id + ' li'), function (i, val) {
                if (val.getAttribute('aria-grabbed') == 'true') {
                    SelectedItems.push(val.id);
                }
            });
            ev.dataTransfer.setData("RequestedAnalyzesIds", SelectedItems);
            ev.dataTransfer.setData("SourceId", ev.target.parentNode.id);
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragend", function (ev) {
            // reset the transparency
            ev.target.style.opacity = "";
        }, false);
        ////////////////////////////////////////////////////////////////////
        /* events fired on the drop targets */
        document.addEventListener("dragover", function (ev) {
            // prevent default to allow drop
            ev.preventDefault();
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragenter", function (ev) {
            // highlight potential drop target when the draggable element enters it
            if (ev.target.className == "dropzone") {
                ev.target.style.background = "purple";
            }
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragleave", function (ev) {
            // reset background of potential drop target when the draggable element leaves it
            if (ev.target.className == "dropzone") {
                ev.target.style.background = "";
            }
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("drop", function (ev) {
            // prevent default action (open as link for some elements)
            ev.preventDefault();
            try {
                console.log("now dropping");
                var RequestedAnalyzesIds = ev.dataTransfer.getData("RequestedAnalyzesIds");
                if (RequestedAnalyzesIds == null || RequestedAnalyzesIds.length == 0
                    || ev.target == null || ev.target.id.length == 0) {
                    return;
                }

                // Move to the unit
                if (ev.target.id.indexOf("UnitId_") == 0) {
                    DragAnalyzesToUnit(ev, RequestedAnalyzesIds);
                }
                    // Move to device
                else if (ev.target.id.indexOf("DeviceId_") == 0) {
                    DragAnalyzesToDevice(ev, RequestedAnalyzesIds);
                }
            }
            catch (err) {
                alert(err.message + err.description);
            }

        }, false);
    });
    ////////////////////////////////////////////////////////////////////
    function DragAnalyzesToUnit(ev, RequestedAnalyzesIds) {
        var RequestedAnalyzesIdsArray = RequestedAnalyzesIds.split(',');
        for (i = 0; i < RequestedAnalyzesIdsArray.length; i++) {
            if (ev.target.id != RequestedAnalyzesIdsArray[i]) {
                var dragElem = document.getElementById(RequestedAnalyzesIdsArray[i]);
                dragElem.parentNode.removeChild(dragElem);
                ev.target.appendChild(dragElem);
            }
        }
    }
    ////////////////////////////////////////////////////////////////////
    function DragAnalyzesToDevice(ev, RequestedAnalyzesIds) {
        var DeviceCapacity = ev.target.getAttribute('data-count-theme');
        var RequestedAnalyzesIdsArray = RequestedAnalyzesIds.split(',');
        var ExistingItems = ev.target.getElementsByTagName('li').length;
        for (i = 0; i < RequestedAnalyzesIdsArray.length; i++) {
            if (DeviceCapacity > ExistingItems) {
                if (ev.target.id != RequestedAnalyzesIdsArray[i]) {
                    var dragElem = document.getElementById(RequestedAnalyzesIdsArray[i]);
                    dragElem.parentNode.removeChild(dragElem);
                    ev.target.appendChild(dragElem);
                    ++ExistingItems;
                }
            } else {
                $("#Drag_Analysis_ToDevice_Confirmation_Popup_Content").text("The device capacity is full, you cannot add any more analyzes to it");
                window.location.href = "#Drag_Analysis_ToDevice_Confirmation_Popup";
            }
        }
    }
    ////////////////////////////////////////////////////////////////////
    function SetSelectedAttribute(ev) {
        var node = ev.target;
        if (node.nodeName.toLowerCase() == 'tr' || node.nodeName.toLowerCase() == 'td' || node.nodeName.toLowerCase() == 'table') {
            node = $(node).closest('li')[0];
        }
        var parentNode = node.parentNode;
        if (node.nodeName.toLowerCase() != 'li') {
            parentNode = node;
            node = null;
        }
        if (!ev.ctrlKey && (parentNode.nodeName.toLowerCase() == 'ol' || parentNode.nodeName.toLowerCase() == 'ul')) {
            ClearSelection(parentNode)
        }

        if (node != null && node.getAttribute('data-draggable') == 'item') {
            node.setAttribute('aria-grabbed', 'true');
        }
    }
    ////////////////////////////////////////////////////////////////////
    function ClearSelection(parentNode) {
        $.each(parentNode.children, function (index, child) {
            child.setAttribute('aria-grabbed', 'false');
        });
    }
    //////////////////////////////////////////////////////////////
    function RunTest(deviceElem) {
        try {
            var form = $('#Work_Unit_Form');

            RequestedAnalyzesIds = [];
           
            var RequestedAnalyzesIdsElem = deviceElem.getElementsByTagName('li');
            for (i = 0; i < RequestedAnalyzesIdsElem.length; i++) {
                RequestedAnalyzesIds.push(RequestedAnalyzesIdsElem[i].id);
            }

            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "/Lab/RunTest",//form.attr('action'),
                data: form.serialize() + "&DeviceId=" + deviceElem.id + "&RequestedAnalyzesIds=" + RequestedAnalyzesIds,
                success: function (data) {
                    if (data != null && data.length > 0) {
                        $("#Device_Plan_Analyzes_Popup_Content").html(data);
                        window.location.href = "#Device_Plan_Analyzes_Popup";
                    }
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err + " " + desc + " " + xhr.responseText);
                }
            });
        }
        catch (err) {
            alert(err.message + err.description);
        }
    }
    ////////////////////////////////////////////////////////////////////////////
    function ConfirmRunTest() {
        //  var form = $(this).closest("form");
        //  var form = $("#Device_Plan_Analyzes_Form");
        var childform = $("#Device_Plan_Analyzes_Popup_Content").children();
        var parentform = childform.closest('form');
        try {
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "/Lab/ConfirmRunTest",//form.attr('action'),
                data: childform.serialize(),
                success: function (data) {
                    if (data != null && data.length > 0) {
                        ClearDeviceAnalyzes(data);
                        Close();
                    }
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err + " " + desc + " " + xhr.responseText);
                }
            });
        }
        catch (err) {
            alert(err.message + err.description);
        }
        return false;
    }
    ////////////////////////////////////////////////////////////////////
    function ClearDeviceAnalyzes(requestedAnalyzesIds) {
        var RequestedAnalyzesIdsArray = requestedAnalyzesIds.split(',');
        for (i = 0; i < RequestedAnalyzesIdsArray.length; i++) {
            var dragElem = document.getElementById("RequestedAnalysisID_" + RequestedAnalyzesIdsArray[i]);
            dragElem.parentNode.removeChild(dragElem);
        }
    }
    //////////////////////////////////////////////////////////
    function Close() {
        window.location.href = "#";
    }
</script>