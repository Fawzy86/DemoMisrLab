@model DemoMisrInternationalLab.Models.UnitsViewModel
<div id="Work_Unit_Loading" style="display:none;"><i class="fa fa-spinner"></i></div>
@using (Html.BeginForm("", "", FormMethod.Post, new { @id = "Work_Unit_Form" }))
{
    @Html.AntiForgeryToken()
    <div class="input-group">

        <div class="col-md-12">
            @Html.DropDownListFor(p => Model.SelectedUnitId,
                                       Model.UnitsIEnum, "-- Units --",
                                     new { @id = "Work_Unit_SelectedUnitId", @class = "form-control" })

        </div>

    </div>
    <div id="Work_Unit_DevicesWithAnalyzes_Container"></div>
    <div id="Device_Plan_Analyzes_Popup" class="overlay">
        <div class=" popup">
            <a class="close" href="#">&times;</a>
            <div class="contentt" id="Device_Plan_Analyzes_Popup_Content"></div>
        </div>
    </div>
    <div id="Move_Analysis_ToDevice_Confirmation_Popup" class="overlay">
        <div class=" popup">
            <a class="close" href="#">&times;</a>
            <div class="contentt" style="overflow: visible;" id="Move_Analysis_ToDevice_Confirmation_Popup_Content"></div>
        </div>
    </div>

}

@*@Scripts.Render("~/bundles/jqueryui")*@
<script type="text/javascript">
    ////////////////////////////////////////////////////////////
    $(document).ajaxStart(function () {
        try {
            $("#Work_Unit_Form").prop('disabled', true);
            //   $("#Chemist_Transactions_Form").hide();
            $("#Work_Unit_Loading").show();
        }
        catch (err) {
            alert(err.message);
        }
    });
    /////////////////////////////////////////////////////////
    $(document).ajaxStop(function () {
        try {
            $("#Work_Unit_Form").prop('disabled', true);
            //   $("#Chemist_Transactions_Form").show();
            $("#Work_Unit_Loading").hide();
        }
        catch (err) {
            alert(err.message);
        }
    });
    /////////////////////////////////////////////////////////////////
    $('#Work_Unit_SelectedUnitId').change(function () {
        var SelectedUnitId = this.value;
        LoadUnitAndDevices(SelectedUnitId);
    });
    //////////////////////////////////////////////////////////////////////
    function LoadUnitAndDevices(UnitId) {
        try {
            $("#Work_Unit_DevicesWithAnalyzes_Container").load('@Url.Action("LoadUnitAndDevices", "Lab")?UnitId=' + UnitId);
        }
        catch (err) {
            alert(err.message);
        }
    }
    ///////////////////////////////////////////////////////////
    $(function () {
        /////////////////////////////////////////////////////////////////////
        document.addEventListener("drag", function (ev) {

        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragstart", function (ev) {
            // store a ref. on the dragged elem
            console.log("dragstart");
            var SelectedItems = [];
            $.each($('#' + ev.target.parentNode.id + ' li'), function (i, val) {
                if (val.getAttribute('aria-grabbed') == 'true') {
                    SelectedItems.push(val.id);
                }
            });
            ev.dataTransfer.setData("analyzesIds", SelectedItems);
            ev.dataTransfer.setData("sourceDeviceId", ev.target.parentNode.id);
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragend", function (ev) {
            // reset the transparency
            ev.target.style.opacity = "";
        }, false);
        ////////////////////////////////////////////////////////////////////
        /* events fired on the drop targets */
        document.addEventListener("dragover", function (ev) {
            // prevent default to allow drop
            ev.preventDefault();
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragenter", function (ev) {
            // highlight potential drop target when the draggable element enters it
            if (ev.target.className == "dropzone") {
                ev.target.style.background = "purple";
            }
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("dragleave", function (ev) {
            // reset background of potential drop target when the draggable element leaves it
            if (ev.target.className == "dropzone") {
                ev.target.style.background = "";
            }
        }, false);
        ////////////////////////////////////////////////////////////////////
        document.addEventListener("drop", function (ev) {
            // prevent default action (open as link for some elements)
            ev.preventDefault();
            try {
                console.log("now dropping");
                var DeviceAnalyzesIds = ev.dataTransfer.getData("analyzesIds");
                console.log(DeviceAnalyzesIds + DeviceAnalyzesIds.length);
                if (DeviceAnalyzesIds == null || DeviceAnalyzesIds.length == 0) {
                    return;
                }
                var DevicesAnalyzesIdsArray = DeviceAnalyzesIds.split(',');
                for (i = 0; i < DevicesAnalyzesIdsArray.length; i++) {
                    console.log(DevicesAnalyzesIdsArray[i]);
                    var elem = document.getElementById(DevicesAnalyzesIdsArray[i]);
                    elem.parentNode.removeChild(elem);
                    ev.target.appendChild(elem);
                }
                var SourceDeviceId = ev.dataTransfer.getData("sourceDeviceId")

                var DestinationDeviceId = ev.target.id;
                if (DestinationDeviceId.indexOf("DeviceAnalysisId_") == 0) {
                    DestinationDeviceId = ev.target.parentNode.id;
                }

                if (SourceDeviceId == DestinationDeviceId || SourceDeviceId.indexOf("DeviceId_") != 0
                    || DestinationDeviceId.indexOf("DeviceId_") != 0
                    || DeviceAnalyzesIds.indexOf("DeviceAnalysisId_") != 0) {
                    return;
                }

                MoveAnalyzes(DeviceAnalyzesIds, SourceDeviceId, DestinationDeviceId, false);
            }
            catch (err) {
                alert(err.message + err.description);
            }

        }, false);
    });
    ////////////////////////////////////////////////////////////////////
    function SetSelectedAttribute(ev) {
        console.log("Evenet dfdsafdsafdsafdsafof setting attr " + ev)
        var node = ev.target;
        var parentNode = node.parentNode;
        console.log(node);
        if (ev.target.nodeName.toLowerCase() != 'li') {
            parentNode = ev.target;
            node = null;
        }
        if (!ev.ctrlKey) {
            ClearSelection(parentNode)
        }

        if (node != null) {
            node.setAttribute('aria-grabbed', 'true');
        }
    }
    ////////////////////////////////////////////////////////////////////
    function ClearSelection(parentNode) {
        console.log(parentNode);
        $.each(parentNode.children, function (index, child) {
            child.setAttribute('aria-grabbed', 'false');
        });
    }
    /////////////////////////////////////////////////////////////////////
    function MoveAnalyzes(SelectedDeviceAnalyzesIds, SelectedSourceDeviceId, SelectedDestinationDeviceId, Overhead) {
        try {
            console.log(SelectedDeviceAnalyzesIds);
            console.log(SelectedSourceDeviceId);
            console.log(SelectedDestinationDeviceId);
            console.log(Overhead);
            // var form = $('#' + SelectedSourceDeviceId).closest("form");
            var form = $('#Work_Unit_Form');
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "/Lab/MoveAnalyzesToAnotherDevice",//form.attr('action'),
                data: form.serialize() + "&DeviceAnalyzesIds=" + SelectedDeviceAnalyzesIds + "&SourceDeviceId=" + SelectedSourceDeviceId + "&DestinationDeviceId=" + SelectedDestinationDeviceId + "&IsOverhead=" + Overhead,
                success: function (data) {
                    if ($(data).filter("#Move_Analysis_ToDevice_Confirmation_Div") != null &&
                       $(data).filter("#Move_Analysis_ToDevice_Confirmation_Div").html() != null) {
                        $("#Move_Analysis_ToDevice_Confirmation_Popup_Content").html(data);
                        window.location.href = "#Move_Analysis_ToDevice_Confirmation_Popup";
                    } else {
                           $("#Work_Unit_DevicesWithAnalyzes_Container").html(data);
                        //LoadUnitAndDevices(data);
                        window.location.href = "#";
                    }
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err.message + " " + desc + " " + xhr.responseText + err.description);
                }
            });
        } catch (err) {
            alert(err.message + err.description);
        }
    }
    //////////////////////////////////////////////////////////////
    function RunTest(deviceId) {
        try {
            var form = $('#Work_Unit_Form');
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: "/Lab/RunTest",//form.attr('action'),
                data: form.serialize() + "&DeviceId=" + deviceId,
                success: function (data) {
                    $("#Device_Plan_Analyzes_Popup_Content").html(data);
                    window.location.href = "#Device_Plan_Analyzes_Popup";
                },
                error: function (xhr, desc, err) {
                    alert("Error: " + err + " " + desc + " " + xhr.responseText);
                }
            });
        }
        catch (err) {
            alert(err.message + err.description);
        }
    }
    //////////////////////////////////////////////////////////
    function Cancel() {
        window.location.href = "#";
    }
</script>