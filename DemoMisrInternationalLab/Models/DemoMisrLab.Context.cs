//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DemoMisrInternationalLab.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DemoMisrIntEntities : DbContext
    {
        public DemoMisrIntEntities()
            : base("name=DemoMisrIntEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Analysis> Analyses { get; set; }
        public virtual DbSet<AnalysisResult> AnalysisResults { get; set; }
        public virtual DbSet<AnalysisResultStatu> AnalysisResultStatus { get; set; }
        public virtual DbSet<CategoryType> CategoryTypes { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Condition> Conditions { get; set; }
        public virtual DbSet<DoctorRef> DoctorRefs { get; set; }
        public virtual DbSet<DoctorSpecialization> DoctorSpecializations { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Entity> Entities { get; set; }
        public virtual DbSet<EntityAction> EntityActions { get; set; }
        public virtual DbSet<JobTitle> JobTitles { get; set; }
        public virtual DbSet<LabBranch> LabBranches { get; set; }
        public virtual DbSet<Organization> Organizations { get; set; }
        public virtual DbSet<OrganizationCondition> OrganizationConditions { get; set; }
        public virtual DbSet<OrganizationConsuming> OrganizationConsumings { get; set; }
        public virtual DbSet<OrganizationInfo> OrganizationInfoes { get; set; }
        public virtual DbSet<Package> Packages { get; set; }
        public virtual DbSet<PackageCostList> PackageCostLists { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientRequest> PatientRequests { get; set; }
        public virtual DbSet<PatientRequestAnalysi> PatientRequestAnalysis { get; set; }
        public virtual DbSet<PatientRequestAnalysisStatu> PatientRequestAnalysisStatus { get; set; }
        public virtual DbSet<PatientRequestPayment> PatientRequestPayments { get; set; }
        public virtual DbSet<PatientRequestStatu> PatientRequestStatus { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Priority> Priorities { get; set; }
        public virtual DbSet<Province> Provinces { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<SampleType> SampleTypes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<PatientRefID> PatientRefIDs { get; set; }
        public virtual DbSet<RequestNumber> RequestNumbers { get; set; }
        public virtual DbSet<RunNumber> RunNumbers { get; set; }
        public virtual DbSet<Patient_PatientRequest> Patient_PatientRequest { get; set; }
        public virtual DbSet<Patient_PatientRequest_AllStatuses> Patient_PatientRequest_AllStatuses { get; set; }
        public virtual DbSet<Patient_PatientRequest_LastStatus> Patient_PatientRequest_LastStatus { get; set; }
        public virtual DbSet<PatientRequest_Analysis> PatientRequest_Analysis { get; set; }
        public virtual DbSet<PatientRequest_PatientRequestAnalysis_AllStatuses> PatientRequest_PatientRequestAnalysis_AllStatuses { get; set; }
        public virtual DbSet<PatientRequest_PatientRequestAnalysis_LastStatus> PatientRequest_PatientRequestAnalysis_LastStatus { get; set; }
        public virtual DbSet<PatientRequest_Payment> PatientRequest_Payment { get; set; }
        public virtual DbSet<PatientRequestAnalysis_AllStatuses> PatientRequestAnalysis_AllStatuses { get; set; }
        public virtual DbSet<PatientRequestAnalysis_LastStatus> PatientRequestAnalysis_LastStatus { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Nullable<int>> GetAnalysisRunNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAnalysisRunNumber");
        }
    
        public virtual ObjectResult<Nullable<int>> GetPatientRefID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetPatientRefID");
        }
    
        public virtual ObjectResult<Nullable<int>> GetRequestNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetRequestNumber");
        }
    
        public virtual ObjectResult<Nullable<int>> AddPatientRequest(Nullable<int> patientId, Nullable<int> doctorRefId, Nullable<int> organizationId, string comment, string priority, Nullable<decimal> paid, Nullable<decimal> totalOrganizationCost, Nullable<decimal> totalPatientCost, Nullable<decimal> extraDiscount, Nullable<decimal> extraCost, string attachmentSession, string analyzesIds)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            var doctorRefIdParameter = doctorRefId.HasValue ?
                new ObjectParameter("doctorRefId", doctorRefId) :
                new ObjectParameter("doctorRefId", typeof(int));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var priorityParameter = priority != null ?
                new ObjectParameter("priority", priority) :
                new ObjectParameter("priority", typeof(string));
    
            var paidParameter = paid.HasValue ?
                new ObjectParameter("paid", paid) :
                new ObjectParameter("paid", typeof(decimal));
    
            var totalOrganizationCostParameter = totalOrganizationCost.HasValue ?
                new ObjectParameter("totalOrganizationCost", totalOrganizationCost) :
                new ObjectParameter("totalOrganizationCost", typeof(decimal));
    
            var totalPatientCostParameter = totalPatientCost.HasValue ?
                new ObjectParameter("totalPatientCost", totalPatientCost) :
                new ObjectParameter("totalPatientCost", typeof(decimal));
    
            var extraDiscountParameter = extraDiscount.HasValue ?
                new ObjectParameter("extraDiscount", extraDiscount) :
                new ObjectParameter("extraDiscount", typeof(decimal));
    
            var extraCostParameter = extraCost.HasValue ?
                new ObjectParameter("extraCost", extraCost) :
                new ObjectParameter("extraCost", typeof(decimal));
    
            var attachmentSessionParameter = attachmentSession != null ?
                new ObjectParameter("attachmentSession", attachmentSession) :
                new ObjectParameter("attachmentSession", typeof(string));
    
            var analyzesIdsParameter = analyzesIds != null ?
                new ObjectParameter("analyzesIds", analyzesIds) :
                new ObjectParameter("analyzesIds", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddPatientRequest", patientIdParameter, doctorRefIdParameter, organizationIdParameter, commentParameter, priorityParameter, paidParameter, totalOrganizationCostParameter, totalPatientCostParameter, extraDiscountParameter, extraCostParameter, attachmentSessionParameter, analyzesIdsParameter);
        }
    }
}
